![Article image](/assets/images/deploy-vjs-spa/deploy_vjs_spa.jpg "Vue.js SPA deployment schema"){: class="BRAND__page-img-max-itself" }

# Deploying a Vue.js Single Page Application

A
[short presentation](/blog/otvl-blog/spa-short-pres)
of
[Single Page Applications (SPA)](https://en.wikipedia.org/wiki/Single-page_application)
has been provided on this blog.
While the SPA architecture
provides great features to the users and the developpers,
the deployment of such applications requires implementing several specific solutions,
some of them are being discussed here.

(It must be noted that important questions and solutions specific to the security of the communication
between the browsers and the servers are not covered here,
but they will be discussed with their specificity in the future on this Blog).

## Handling URL schemes

The HTTP server must honor all the potential application URLs
by providing the _single-page_ HTML file in response to HTTP requests to any of them.

On the other hand, assets and other resource files that do not have strictly
a URL for the application entry point must not be handled the same way.
More specifically, such resources may be missing on the web server
which must answer in this case with a 404 HTTP status
and not with the default _single-page_ HTML file.

Using Vue.js will for instance build the following static files structure to be deployed:

    :::sh
    spa
    ├── css
    │   └── app.607c7d80.css
    ├── index.html
    ├── js
    │   ├── app.7dc9a54e.js
    │   ├── runtime.d5cde5e4.js
    │   └── vendor.87fc6fee.js
    └── statics
        ├── img
        │   ├── favicon.ico
        │   └── user.png
        └── js
            └── luxon.min.js

Configuring Apache 2.4+ for such an aim can be achieved for instance with the following:

    :::apache
    DocumentRoot "/path/to/document/root"
    <Directory /path/to/document/root>
      Require all granted
      FallbackResource /index.html
    </Directory>
    <Directory /path/to/document/root/css>
      FallbackResource disabled
    </Directory>
    # etc.

## Deployment-time configuration

Configuring a SPA at deployment-time is a little bit tricky,
because the application is packaged during development
as a fully static site that is viewed by the browser as such.

To understand why, consider the following:
the launch of a Vue.js SPA as described on the following schema
involves several steps:

1. The browser download the _single-page_ default HTML file 
2. The browser parses the file, finds linked elements and downloads them,
   among which the Vue.js application JavaScript file
3. The Vue.js application calls the API server to get application data to be displayed

![Launch Schema](/assets/images/spa-short-pres/spa_short_pres_start.jpg "SPA launch schema"){: class="BRAND__page-img-max-itself" }

Configuring the client-side application can generally be done
through the use of specific application data requested on the API server.  

But some client-side configuration must
TBC

Because a good
[DevOps](https://en.wikipedia.org/wiki/DevOps)
practice is to rely on an
[immutable deployment](https://www.digitalocean.com/community/tutorials/what-is-immutable-infrastructure),
we don't want to deploy different packages on different environments.

## Supporting Search Engines

To be completed.

## Final configuration

To be completed.

## Useful links

### Articles and guides

- [vue router - HTML5 History Mode](https://router.vuejs.org/guide/essentials/history-mode.html)
- [otvl blog - Single Page Application short presentation](/blog/otvl-blog/spa-short-pres)

### References

- [Vue.js](https://vuejs.org/)
- [Vue Router](https://router.vuejs.org/)
