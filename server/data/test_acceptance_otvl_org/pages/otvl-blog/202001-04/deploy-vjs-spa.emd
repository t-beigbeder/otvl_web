<div otvl-web>
type: sf_q_img_in_card
src: /assets/images/deploy-vjs-spa/deploy_vjs_spa.jpg
alt: Article image
title: Vue.js SPA deployment schema
</div>

# Deploying a Vue.js Single Page Application

<div otvl-web>
type: sf_page_dates
</div>

A
[short presentation](/blog/otvl-blog/spa-short-pres)
of
[Single Page Applications (SPA)](https://en.wikipedia.org/wiki/Single-page_application)
has been provided on this blog.
While the SPA architecture
provides great features to the users and the developpers,
the deployment of such applications requires implementing several specific solutions,
some of them are being discussed here.

(It must be noted that important questions and solutions specific to the security of the communication
between the browsers and the servers are not covered here,
but they will be discussed with their specificity in the future on this Blog).

## Handling URL schemes

The HTTP server must honor all the potential application URLs
by providing the _single-page_ HTML file in response to HTTP requests to any of them.

On the other hand, assets and other resource files that do not have strictly
a URL for the application entry point must not be handled the same way.
More specifically, such resources may be missing on the web server
which must answer in this case with a 404 HTTP status
and not with the default _single-page_ HTML file.

Using Vue.js will for instance build the following static files structure to be deployed:

    :::sh
    spa
    ├── css
    │   └── app.607c7d80.css
    ├── index.html
    ├── js
    │   ├── app.7dc9a54e.js
    │   ├── runtime.d5cde5e4.js
    │   └── vendor.87fc6fee.js
    └── statics
        ├── img
        │   ├── favicon.ico
        │   └── user.png
        └── js
            └── luxon.min.js

Configuring Apache 2.4+ for such an aim can be achieved for instance with the following:

    :::apache
    DocumentRoot "/path/to/document/root"
    <Directory /path/to/document/root>
      Require all granted
      FallbackResource /index.html
    </Directory>
    <Directory /path/to/document/root/css>
      FallbackResource disabled
    </Directory>
    # etc.

## Deployment-time client application configuration

Configuring the client-side application can generally be done
through the use of specific application data requested on the API server.  

But client-side configuration sometimes must be available
prior to the actual application launch.
In the case of a Vue.js application, this can occur for instance:

- for configuring the endpoints of an API server;
- for initializing routing tables...

To understand why such a simple requirement may be a little bit tricky in the case of a SPA,
we must:

- remember that the application is packaged during development
  as a fully static site that is viewed by the browser as such;
- and consider the following: the launch of a Vue.js SPA as described on the following schema
  involves several steps:
    1. The browser downloads the _single-page_ default HTML file 
    2. The browser parses the file, finds linked elements and downloads them,
       among which the Vue.js application JavaScript file
    3. The Vue.js application calls the API server to get application data

<div otvl-web>
type: sf_q_img_in_card
src: /assets/images/spa-short-pres/spa_short_pres_start.jpg
alt: Launch Schema
title: SPA launch schema
class_: self_width_img
</div>

We could generate one specific application bundle for each distinct deployment environment.
But the deployment pipeline would become heavy and slow, and the solution is not scalable.

A simple solution is to patch the _single-page_ HTML file at deployment-time
with required configuration data
so that the client application can retrieve the information
in the page's DOM as soon as required during its startup.
For instance in the case of the API server endpoint:

    :::html hl_lines="9"
    <!DOCTYPE html>
    <html>
      <head>
        <base href=/ >
        <title>otvl web GUI</title>
        <!-- etc -->
      </head>
      <body>
        <div id=app api-server-url=API_SERVER_ENDPOINT>
        </div>
        <script src=/js/app.cee88fc5.js></script>
        <!-- etc -->
      </body>
    </html>

## Supporting Search Engines

The SPA navigation is achieved by triggering JavaScript actions
in response to user-interaction with the application's GUI elements.
The resulting pages contents are built by updating the _single-page_'s DOM
through the execution of those JavaScript actions.

If we want the corresponding pages to be crawled and indexed by Search Engine robots,
we must:

- provide the site structure and its URLs through a sitemap.xml resource
- provide the same kind of content in its HTML form for each of those URLs

Here is an example of sitemap.xml resource

    :::xml
    <?xml version="1.0" encoding="UTF-8"?>
    <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
      <url><loc>https://spa-endpoint/blox/otvl-blog</loc><lastmod>2020-05-28</lastmod></url>
      <url><loc>https://spa-endpoint/blog/otvl-blog/otvl-web-pres</loc><lastmod>2020-06-02</lastmod></url>
      <url><loc>https://spa-endpoint/blog/otvl-blog/deploy-vjs-spa</loc><lastmod>2020-05-29</lastmod></url>
      <url><loc>https://spa-endpoint/blog/otvl-blog/k8s-local-dev</loc><lastmod>1970-01-01</lastmod></url>
      <url><loc>https://spa-endpoint/page/about</loc><lastmod>2020-05-28</lastmod></url>
      <url><loc>https://spa-endpoint/page/about/legal-policies</loc><lastmod>2020-05-28</lastmod></url>
    </urlset>

Providing pages content in HTML form can be simple and rudimentary because only the content matters.
For instance, using a
[Jinja2](https://jinja.palletsprojects.com)
template fed with some API server page data:

    :::jinja
    <!DOCTYPE html>
    <html>
      <head>
        <base href=/ >
        <title>{{ content.title }}</title>
        <meta charset=utf-8>
        <link rel=icon type=image/ico href=statics/img/favicon.ico>
      </head>
      <body>
        <div>
          <h1>{{ content.heading }}</h1>
    {% for sf in content.stream_fields %}
    {% if sf.type == "html" %}
          <div>
            {{ sf.content }}
          </div>
    {% endif %}
    {% if sf.type == "sf_img" %}
          <img src="{{ sf.src }}">
            {{ sf.content }}
          </div>
    {% endif %}
    {% endfor %}
        </div>
      </body>
    </html>

In such a case, the pages contents will be provided by the API server in the simplest case,
if not by a complementary component responsible to build HTML content from application data. 
The deployment must in any case involve a reverse proxy that will route URL requests:

- either to the _single-page_ static HTTP server if the client is a browser
- or to the HTML rendering component if the client is a Search Engine robot

## Final configuration

### Deployed components architecture example

We are describing here the following deployment, based on the solutions previously described.
The asumption is made that all the URLs belong to the same DNS domain.

<div otvl-web>
type: sf_q_img_in_card
src: /assets/images/deploy-vjs-spa/deploy_vjs_spa_dca.jpg
alt: Deployed components architecture Schema
title: Deployed components architecture Schema
class_: self_width_img
</div>

- The Apache reverse proxy is responsible for the routing of client-side requested URLs
  to the relevant back-end component
- The Apache http server serves static content
- The Python Tornado API server serves configuration and application dynamic content  

### Corresponding configuration

The Apache reverse proxy configuration will looks like this
based on the rewrite engine:

    :::apache
    RewriteEngine on
    
    RewriteCond "%{REQUEST_URI}"  "^/assets/" [OR]
    RewriteCond "%{REQUEST_URI}"  "^/api/" [OR]
    RewriteCond "%{REQUEST_URI}"  "^/favicon.ico$" [OR]
    RewriteCond "%{REQUEST_URI}"  "^/sitemap.xml$"
    RewriteRule ^ - [L]
    
    RewriteCond "%{HTTP_USER_AGENT}"  "Googlebot"  [OR]
    # etc.
    RewriteCond "%{HTTP_USER_AGENT}"  "DuckDuckBot"
    RewriteRule "^/(.*)$"  "/api/html4/$1" [L,PT]
    
    ProxyRequests off
    ProxyPreserveHost on
    ProxyPass /api/ http://api-server/api/ nocanon
    ProxyPassReverse /api/ http://api-server/api/
    ProxyPass /sitemap.xml http://api-server/api/sitemap.xml
    ProxyPassReverse /sitemap.xml http://api-server/api/sitemap.xml
    ProxyPass / http://http-server/
    ProxyPassReverse / http://http-server/

The Apache http server configuration will be as described above

    :::apache
    DocumentRoot "/path/to/document/root"
    <Directory /path/to/document/root>
      Require all granted
      FallbackResource /index.html
    </Directory>
    <Directory /path/to/document/root/css>
      FallbackResource disabled
    </Directory>
    # etc.

The API server will serve all dynamic content, using the following URLs mapping in the case of
[python tornado](https://www.tornadoweb.org/):

    :::python
    (r"/api/sitemap.xml", SiteMapHandler, handler_kwa),
    (r"/api/html4/([^/]*)/([^/]*)/?", Html4PageHandler, handler_kwa),
    (r"/api/([^/]*)/([^/]*)/?", PageHandler, handler_kwa),

## Useful links

### Articles and guides

- [vue router - HTML5 History Mode](https://router.vuejs.org/guide/essentials/history-mode.html)
- [otvl blog - Single Page Application short presentation](/blog/otvl-blog/spa-short-pres)

### References

- [Vue.js](https://vuejs.org/)
- [Vue Router](https://router.vuejs.org/)
