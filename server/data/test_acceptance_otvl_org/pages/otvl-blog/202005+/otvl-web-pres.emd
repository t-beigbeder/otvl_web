![Article image](/assets/images/otvl-web-pres/business-background-illustration-people.jpg "Web Content Manager Cartoon"){: class="BRAND__page-img-max-itself" }

_[Illustration above credit](https://www.piqsels.com/en/public-domain-photo-jrrkb)_

# Publishing content efficiently with otvl_web

Otvl_web is an
[Open Source](https://en.wikipedia.org/wiki/Free_and_open-source_software)
web application whose main objective is an efficient digital content publishing.

It is built over the
[Vue.js framework](https://vuejs.org/)
as a
_[single-page application](https://en.wikipedia.org/wiki/Single-page_application)_.

There is at this time no GUI for editing a site content,
so the content publisher has to update the site
using technical tools to modifiy and upload files.
However, the files structure, their contents and their organization remain easy to understand.

This article first gives a short presentation of the application.
In a second part, some feeback from a development point of view is detailed.
Finally, some information concerning the deployment is provided.

You will find useful references at the bottom of this page.

## General presentation

### Content publisher point of view

From a content publisher point of view, the benefits of this tool are that

- the site structure and how it is navigable by the end-user through menus/sub-menus
  is easily configurable;
- the web application also features a simple application for blog publishing;
- the site configuration, the pages content, media files such as documents, images and video files
  are managed directly as files on the server;
- the site configuration and the pages metadata are described through
  [YAML](https://yaml.org/)
  files, a simple language to describe structured data;
- the pages contents are described in
  [markdown](https://daringfireball.net/projects/markdown/syntax),
  a simple language widely used to describe web page (and other) contents;
- the underlying 
  _[single-page application](https://en.wikipedia.org/wiki/Single-page_application)_
  architecture enables smoother pages transitions and uses less data over the network;
- the underlying technology can provide the user with
  a high level of ergonomy:
  you may browse the collection of
  [Quasar Vue Components](https://quasar.dev/vue-components/)
  for instance, to make your opinion;
- the simple publication application can be extended to provide dedicated features
  through rapid development.

Uploading YAML and markdown source files along with media files
is an efficient way of working in organizations where the site publisher
and the site administrator are the same person.

As mentioned above, there is no GUI for editing content.
The content publisher must have direct or indirect access to the content files on the server.
An example of indirect access is the use of [git](https://git-scm.com/) along with triggers
to upload files after commit.

There is yet no access control on the publish content either.

### Developper point of view

From a developper point of view, the benefits of this tool are that

- the front-end is developped with
  [Vue.js](https://vuejs.org/)
  and more specifically
  [Quasar](https://quasar.dev/)
  layouts and components,
  so the site general _look-and-feel_ may be customized and enriched efficiently;
- on the server side, a collection of simple REST web services are developped in python,
  their roles being mainly to serve files to the Vue.js client, either directly or
  with trivial yaml-to-json conversion;
- this simple design also enables to add specific site features through rapid development.

### Operations point of view

The following topics are detailed in the section "Deployment" below:

- the application supports web crawler bots through sitemap.xml generation
  and server-side HTML rendering;
- a static Vue.js site may be configured at deployment time concerning the actual server DNS name.

### Current status

This application
[ git [![Image GitHub](/assets/images/common/github-logo-24.png)](https://github.com/t-beigbeder/otvl_web) ]
is still a work-in-progress, however it is already hosting a few web sites in production,
including this one.

The first concern at this time is obviously the lack of documentation.
However this gap may be filled easily, thus quickly,
moreover, several samples that are used for tests
and a demonstration site can help to start a new site,

A second concern is about the ability to customize the site's _look-and-feel_
without having to modify the source code.
Several options for this goal are already present but, with no doubt,
the first future features implemented will target this concern
through a clean packaging for reuse and extension.

## Feedback from the development

### Vue.js

#### Core

The front-end is implemented as mentioned above with
[Vue.js](https://vuejs.org/),
a major framework for building
[single-page applications](https://en.wikipedia.org/wiki/Single-page_application),
with the characteristic of being incrementally adoptable.

Vue.js is one of the Open Source projects with the most amazing documentation quality.
Being very compact, the documentation can be read easily in a few hours.

Generally speaking, the framework provides developpers with very powerful features
while remaining as simple to use as possible.
All the complexity is kept in the implementation of the framework itself.

Even if the full otvl_web application is implemented as a single page,
I also found the _incremental adoption_ design very valuable concerning the learning curve:
you can start the application design relying on simple and possibly naive choices,
while progressively refactoring the existing codebase towards a more efficient implementation,
as your self-confidence increases.  
For instance, the use of components may appear intimidating to newcomers,
specifically concerning the organization of the information among parent and children components.
However, with a little bit of practice, the refactoring of duplicated code
relying on new components can be achieved rather easily and incrementally,
while the information reorganization among components appears rather spontaneously.

#### Routing

Every web application, being it single page or not,
has to map URLs to related page structure and content.
In the case of single-page applications, the routing is achieved on the client side.

[Vue.js](https://vuejs.org/) comes with a fully integrated yet optional
[router](https://router.vuejs.org/) component,
which is as compact and simple to use as Vue.js itself.
Being said very schematically, its role is to trigger the execution of specific page handlers
when a new URL scheme is requested from another page, in response to user demand.
Because URL schemes are hierarchic by nature, so the organization of those page handlers has to be.
This can appear as a constraint in the case of otvl_web where the URLs
should map the site content hierarchy rather than specific parts implementation.
For such a specific requirement, a dedicated router
or perhaps a better understanding of Vue.js router API would be required.  

### Quasar

The
[Quasar framework](https://quasar.dev/)
is based on
[Vue.js](https://vuejs.org/)
and it adds a lot of high level features from a developper perspective
to enable a very efficient development of new applications.
Some specific features are the ability to share the same design
for classic browsers, for mobile browsers and for mobile applications,
but in the case of otvl_web, we will keep the focus here on the features dedicated
to the style and the ergonomy of web applications.

For those familiar with the
[Twitter Bootstrap](https://getbootstrap.com/) library,
Quasar provides the web designer with the same kind of features
but "translated" in the Vue.js world:

- the Quasar framework contains a rich collection of Vue.js ready-to-use
[components](https://quasar.dev/vue-components/)
fully integrated with the other characteristics of the framework;
- the site's identity may be easily customized using existing CSS tools;
- the general pages layout may be easily designed using a responsive grid system.

The documentation of the framework is as excellent as the Vue.js documentation is.
The framework is a little bit more complex for beginners as it relies exclusively Vue.js components.
Like Vue.js, it is very modular, and even if it integrates well with Vue router or Vuex extensions,
their use is absolutely not required for simple applications.

Finally, it offers a powerful
[command-line interface](https://quasar.dev/start/quasar-cli)
that helps the newcomer to start a new project easily
and support the developper for configuring complex sets of development options.

### Single-page applications

#### Benefits

The design of a single-page application compared to
the design of a classical web "client-server" application
provides the developper with much more simplicity and efficiency.
The most obvious reason is that the separation of concerns
between the client and the server appears really logical.
Even if the developper has "full-stack" competencies,
the organization of work is much more natural when relying on such architecture.

Another benefit of single-page application architecture might not be obvious at first glance:
the GUI design may in that case be achieved using a static GUI mockup along with mock data,
but this mockup will not be throwable in that case,
because it uses the same tools as the final product will.
With the added availability of _off-the-shelf_ components like in the case of the 
[Quasar framework](https://quasar.dev/),
the developper becomes much more efficient when implementing new designs.
By contrast, GUI design with a classical web "client-server" architecture
is achieved with static HTML and has to be translated to server-side templates.
In that case, the static design becomes more and more outdated as the application evolves.

#### Mitigated concerns

Every technology comes with its constraints,
yet technologies based on JavaScript or single-page application have very specific ones.

The first concern is about tooling.
Each Vue.js project has to create a local repository (`node_modules`) of JavaScript modules
for the support of development, packaging and run-time tooling and services.
In the case of otvl_web, this repository contains more than 300 MB,
even without using automatic testing tools (shame on me) which add a lot of other modules.
This consumes a lot of bandwidth and storage space and it has to be instantiated for each project.
The resulting development framework is also quite complex and difficult to be mastered by newcomers.

That being said, the downloaded modules quality is generally excellent,
moreover development and packaging tools
may be used along with lightweight development tools
like a text editor and a command-line terminal.
The
[Quasar framework](https://quasar.dev/),
also integrates those tools very efficiently though a dedicated
[command-line interface](https://quasar.dev/start/quasar-cli).

A second concern is about the
[single-page application](https://en.wikipedia.org/wiki/Single-page_application),
technology.
While it has many benefits for the user and the developper,
it also comes with some constraints, generally related to URL handling.
URL changes appear on the client-side,
while the browser navigation bar and
[history](https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API)
are updated at the same time
so that the user sees and handles familiar URLs.
But even if the URL changes are performed locally only in the browser,
as the user may bookmark or refresh the current one,
all of them have to be also honored on the server side.
The
[vue router documentation](https://router.vuejs.org/guide/essentials/history-mode.html)
provides detailed instructions about how to handle this specific requirement.
It is finally important to note that the implementation of the
[history API](https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API)
in the browsers has various status.

Another issue related to URL management concerns the use of HTML anchors.
It appears like if the current implementation of the
[history API](https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API)
were not consistent with the use of anchors from a user perspective.

An important concern related to single-page applications is the
[SEO](https://en.wikipedia.org/wiki/Search_engine_optimization).
As the web crawler robots generally don't have performant JavaScript capabilities,
or sometimes don't support Javascript at all,
the rendered content must be provided as simple HTML for such clients.
If not, the web crawler will only download a page template with no specific content.

The final concern is about deployment: even if the separation of concerns
between the browser and the server is clear,
some topics have to be taken into account on both sides:
we have seen the case for URLs handling,
but other topics like robots.txt or sitemap.xml rendering also require a shared knowledge
of URL schemes.
As those topics reside at the border between development and operations,
an effective
[DevOps](https://en.wikipedia.org/wiki/DevOps)
practice help to provide efficient and simple solutions
through a clear understanding of both parts constraints.

## Deployment

Concerning the deployment of the otvl_web application,
we have seen that single-page applications require specific configuration
on the server-side to handle the URL otherwise routed on the client-side,
but also to support web crawler robots.

Some questions and solutions specific to the deployment of a Vue.js
_single-page application_ are detailed in the article
_**[Deploying a Vue.js Single Page Application](/blog/otvl-blog/deploy-vjs-spa)**_.

The ovl_web application
[ git [![Image GitHub](/assets/images/common/github-logo-24.png)](https://github.com/t-beigbeder/otvl_web) ]
comes with Dockerfiles to produce the different components of the following architecture.

![Docker components](/assets/images/otvl-web-pres/otvl_web_docker.jpg "Architecture schema for the docker components"){: class="BRAND__page-img-max-itself" }

If you have
[docker](https://docs.docker.com/)
and
[docker-compose](https://docs.docker.com/compose/)
installed on a development environment, you can run those components using the following commands:

    :::sh
    # run docker build for the three components
    $ dev/shell/run_dkb_for_compose.sh  
    # run the three components with docker compose
    $ dev/shell/run_compose_up.sh \
      [/path/to/a/specific/otvl_web/site]

The otvl_ansible
[ git [![Image GitHub](/assets/images/common/github-logo-24.png)](https://github.com/t-beigbeder/otvl_ansible) ]
project provides
[Ansible](https://docs.ansible.com/ansible/latest/)

## Useful links

### Articles and guides

- [codemag - HTML5 History](https://www.codemag.com/Article/1301091/HTML5-History-Clean-URLs-for-Deep-linking-Ajax-Applications)
- [css-tricks - Using the HTML5 History API](https://css-tricks.com/using-the-html5-history-api/)
- [mozilla - Working with the History API](https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API)
- [vue router - HTML5 History Mode](https://router.vuejs.org/guide/essentials/history-mode.html)
- [Deploying a Vue.js Single Page Application](/blog/otvl-blog/deploy-vjs-spa)

### References

- [Vue.js](https://vuejs.org/)
- [Quasar framework](https://quasar.dev/)
- [History API](https://developer.mozilla.org/en-US/docs/Web/API/History_API)
