![Article image](/assets/images/otvl-web-pres/business-background-illustration-people.jpg "Web Content Manager Cartoon"){: class="BRAND__page-img-full" }

_[Illustration above credit](https://www.piqsels.com/en/public-domain-photo-jrrkb)_

# Publishing content efficiently with otvl_web

Otvl_web is an
[Open Source](https://en.wikipedia.org/wiki/Free_and_open-source_software)
web application mainly intended to publish content efficiently.

There is at this time no GUI for editing a site content,
so the content publisher has to update the site
using technical tools to modifiy and upload files.
However, the files structure, their contents and their organization remain easy to understand.

This article first gives a short presentation of the application.
In a second part, some feeback from a development point of view is detailed.
Finally, some information concerning the deployment is provided.

## General presentation

### Content publisher point of view

From a content publisher point of view, the benefits of this tool are

- the site structure and how it is navigable by the end-user through menus/sub-menus
  is configurable;
- the web application also features a simple blog publish application;
- the pages content is described by a sequence of textual, graphical or video items, as well
  as hyperlinks and some page layout directive;
- the site configuration, the pages content,
  media files such as documents, images and video files
  are managed directly as
  [YAML](https://yaml.org/)
  files on the server;
- the pages contents are described in
  [markdown](https://daringfireball.net/projects/markdown/syntax);
- the underlying technology can provide the user with
  a high level of ergonomy:
  you may browse the collection of
  [Quasar Vue Components](https://quasar.dev/vue-components/)
  for instance, to make your opinion;
- the simple publication application can be extended to provide dedicated features
  through rapid development.

As mentioned above, there is no GUI for editing content.
The content publisher must have direct or indirect access to the content files on the server.
An example of indirect access is the use of [git](https://git-scm.com/) along with triggers
to upload files after commit. 

Uploading YAML and markdown source files along with media files
can appear as a very efficient way of working in organizations where the site publisher
and the site administrator are the same person.

### Developper point of view

From a developper point of view, the benefits of this tool are

- the front-end is developped with
  [Vue.js](https://vuejs.org/)
  and more specifically
  [Quasar](https://quasar.dev/)
  layouts and components,
  so the site general _look-and-feel_ may be customized and enriched efficiently;
- on the server side, a collection of simple REST web services are developped in python,
  their roles being mainly to serve files to the Vue.js client, either directly or
  with trivial yaml-to-json conversion;
- this simple design also enables to add specific site features through rapid development.

### Current status

This application
[ git [![Image GitHub](/assets/images/common/github-logo-24.png)](https://github.com/t-beigbeder/otvl_web) ]
is still a work-in-progress, however it is already hosting a few web sites in production,
including this one.

The first concern at this time is obviously the lack of documentation.
However several samples that are used for tests and a demonstration site
can help to start a new site,
moreover this gap may be filled easily, thus quickly.

A second concern is about the ability to customize the site's _look-and-feel_
without having to modify the source code.
Several options for this goal are already present but, with no doubt,
the first future features implemented will target this concern.

## Development feedback

### Vue.js

#### Single page

The front-end is implemented as mentioned above with
[Vue.js](https://vuejs.org/),
a major framework for building
[single-page applications](https://en.wikipedia.org/wiki/Single-page_application),
with the characteristic of being incrementally adoptable.

Vue.js is one of the Open Source projects with the most amazing documentation quality.
Being very compact, the documentation can be read easily in a few hours.

Generally speaking, the framework provides developpers with very powerful features
while remaining as simple to use as possible.
All the complexity is kept in the implementation of the framework itself.

Even if the full otvl_web application is implemented as a single page,
I also found the incremental adoption design very valuable concerning the learning curve:
you can start the application design relying on simple and possibly naive choices,
while progressively refactoring the existing codebase towards a more efficient implementation,
as your self-confidence increases.  
For instance, the use of components may appear intimidating to newcomers,
specifically concerning the organization of the information among parent and children components.
However, with a little bit of practice, the refactoring of duplicated code relying on components
can be achieved rather easily and incrementally,
while the information reorganization appears rather spontaneously.

#### Routing

Every web application, being it single page or not,
has to map URLs to related page structure and content.
In the case of single-page applications, the routing is achieved on the client side.

[Vue.js](https://vuejs.org/) comes with a fully integrated yet optional
[router](https://router.vuejs.org/) component,
which is as compact and simple to use as Vue.js itself.
Being said very schematically, its role is to trigger the execution of specific page handlers
when a new URL scheme is requested from another page, on user demand.
Because URL schemes are hierarchic by nature, so the organization of those page handlers has to be.
This can appear as a constraint in the case of otvl_web where the URLs
should map the site content hierarchy rather than specific parts implementation.
For such a specific requirement, a dedicated router
or a better understanding of Vue.js router API is required.  

### Single-page applications

#### Benefits

The design of a single-page application compared to
the design of a classical web "client-server" application
also provides the developper with much more simplicity and efficiency.
The most obvious reason is that the separation of concerns
between the client and the server appears really logical.
Even if the developper has "full-stack" competencies,
the organization of work is much more natural when relying on such architecture.

Another benefit of single-page application architecture might not be obvious at first glance:
the GUI design may in that case be achieved using a static GUI mockup along with mock data,
but this mockup will not be throwable in that case,
because it uses the same tools as the final product will.
With the added availability of _off-the-shelf_ components like in the case of the 
[Quasar framework](https://quasar.dev/),
the developper becomes much more efficient when implementing new designs.
By contrast, GUI design with a classical web "client-server" architecture
is achieved with static HTML and has to be translated to server-side templates.
In that case, the static design becomes more and more outdated as the application evolves.

#### Mitigated concerns

Every technology comes with its constraints,
yet JavaScript based technologies have very specific ones.

The first concern is about tooling.
Each Vue.js project has to create a local repository (`node_modules`) of JavaScript modules
for the support of development, packaging and run-time tooling and services.
In the case of otvl_web, this repository contains more than 300 MB,
without using automatic testing tools (shame on me).
This consumes a lot of bandwidth and storage space and it has to be instantiated for each project.
The resulting development framework is also very complex and difficult to be mastered by newcomers.

That being said, the downloaded modules quality is generally excellent,
moreover development and packaging tools
may be used along with lightweight development tools
like a text editor and a command-line terminal.
The
[Quasar framework](https://quasar.dev/),
also integrates those tools very efficiently though a dedicated
[command-line interface](https://quasar.dev/start/quasar-cli).

A second concern is about the very single-page application technology.
While it has many benefits for the user and the developper,
it also comes with its constraints.

TBC: concerns about deployment

### Quasar

TBC

## Deployment

TBC

## Conclusion

TBC

## Useful links

TBC
