![Article image](/assets/images/deploy-vjs-spa/deploy_vjs_spa.jpg "Vue.js Single Page Application schema"){: class="BRAND__page-img-max-itself" }

# Deploying a Vue.js Single Page Application

While the
[Single Page Application (SPA)](https://en.wikipedia.org/wiki/Single-page_application)
Architecture
provides great features to the users and the developpers,
the deployment of such applications requires implementing several specific solutions,
some of them are being discussed here.

(It must be noted that important questions and solutions specific to the security of the communication
between the browsers and the servers are not covered here,
but they will be discussed with their specificity in the future on this Blog).

## A short presentation

### Technical overview

It is difficult to talk about SPA applications without a small amount of technical details.
On the schema above, we can see the application users dealing with media files and application data
by using a Web browser where those informations are presented
and the application data may be updated.

The SPA architecture introduces in this general context a clear separation of concerns
in the design of the application:

- the browser is fully responsible for rendering the Graphical User Interface (GUI)
  and handling the interactions with the user;
- an application server, the API (Application Programming Interface) server,
  is fully responsible for accessing and updating application data.

Because the application is still a Web Application,
some HTML files required for GUI rendering still need to be served to the browser
by an HTTP server.

When the application is first launched (see the schema below), the browser downloads a basic HTML page
and corresponding JavaScript, CSS, images and other media files,
and in the same step a main JavaScript application that renders the GUI by updating the
browser's DOM (Document Object Model),
using some application data downloaded at the same time.

![First Launch Schema](/assets/images/deploy-vjs-spa/deploy_vjs_spa_start.jpg "Vue.js first launch schema"){: class="BRAND__page-img-max-itself" }

After this initial step, all interaction with the user is achieved under the control of the
application running in the browser.
More application data is downloaded on demand and is possibly updated through the API.

### Benefits and constraints

The SPA architecture provides great features to the users and the developpers.
On the user side, page transitions are smoother and network data usage is optimal.
On the developper side, the software architecture
and the corresponding client and server implementations are much simpler to design and to maintain.
And finally, from both point of views,
the use of graphical components libraries enable to achieve a great level of ergonomy.

On the other hand, the development must be concerned about
how the application may be crawled by Search Engine robots:
as those robots sometimes don't support Javascript at all,
the rendered content must be provided as simple HTML for such clients.
A consequence is that some application content must be rendered both on the client in JavaScript,
but also on the API server using whatever technology is available there.
This concern is often mitigated first because dynamic application content often does not benefit from
Search Engine services,
and secondly because the HTML rendering from application data can remain rather simple.

Several other constraints linked to SPA architecture appear
beyond its apparent simplicity during the deployment of SPA applications.
The following sections will discuss those specific questions
and describe possible solutions.

## Routing URLs

### Single page with many URLs

If a SPA application is called _single-page_,
it must generally nevertheless manage a full set of URLs, as a classical Web Application would,
in response to user navigation requests.
Those URLs are displayed in the navigation bar and may be bookmarked by the users
as well as handled through the browser's history menu.

### Routing with Vue.js

Any SPA application with numerous page contents must rely on some kind of routing.
Vue.js comes with a dedicated [router](https://router.vuejs.org/) component,
that helps developper to map URLs schemes to dedicated JavaScript components to handle them.

The routing is generally achieved internally, no interaction with the server is required
to change the URL and the page content. API calls are only necessary for application data exchange. 

However the user must have the ability to launch the application by requesting a bookmarked URL.
In such a case, the application still performs its standard initialization process,
but the browser-side router must be invoked to map the requested URL
to the corresponding JavaScript component to render the requested content and data,
as it would do during standard navigation.

The browser-side routing thus appear as a very natural programming model to the developper.
 
## Deployment-time configuration

To be completed.

## Supporting Search Engines

To be completed.

## Final configuration

To be completed.

## Useful links

### Articles and guides

- [vue router - HTML5 History Mode](https://router.vuejs.org/guide/essentials/history-mode.html)

### References

- [Vue.js](https://vuejs.org/)
- [Vue Router](https://router.vuejs.org/)
